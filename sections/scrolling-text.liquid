{%- if section.blocks.size > 0 -%}
  {%- render 'section-spacing-collapsing' -%}

  <style>
    #shopify-section-{{ section.id }} {
      --scroll-speed: {{ section.settings.animation_speed }}s;
      --background-color: {{ section.settings.background_color | default: 'transparent' }};
      --text-color: {{ section.settings.text_color | default: '#000' }};
      --separator-color: {{ section.settings.separator_color | default: '#ccc' }};
      --separator-spacing: {{ section.settings.separator_spacing }}px;
      --item-gap: {{ section.settings.item_gap }}px;
      --font-size: clamp({{ section.settings.min_font_size }}px, {{ section.settings.font_size_vw }}vw, {{ section.settings.max_font_size }}px);
      --icon-size: {{ section.settings.icon_size }}px;
      --image-height: {{ section.settings.image_height }}px;
    }

    /* Container Principal */
    .advanced-scroll-container {
      position: relative;
      width: 100%;
      overflow: hidden;
      background: var(--background-color);
      {% if section.settings.background_gradient != blank %}
        background: {{ section.settings.background_gradient }};
      {% endif %}
      color: var(--text-color);
      padding: {{ section.settings.section_padding_top }}px 0 {{ section.settings.section_padding_bottom }}px;
    }

    /* Masque de d√©grad√© pour effet de fondu */
    .scroll-mask {
      position: relative;
      overflow: hidden;
      height: auto;
      min-height: 60px;
    }

    .scroll-mask::before,
    .scroll-mask::after {
      content: '';
      position: absolute;
      top: 0;
      width: 50px;
      height: 100%;
      z-index: 2;
      pointer-events: none;
    }

    .scroll-mask::before {
      left: 0;
      background: linear-gradient(to right, var(--background-color, rgba(255,255,255,1)), transparent);
    }

    .scroll-mask::after {
      right: 0;
      background: linear-gradient(to left, var(--background-color, rgba(255,255,255,1)), transparent);
    }

    /* Piste de d√©filement */
    .scroll-track {
      display: flex;
      align-items: center;
      gap: var(--item-gap);
      white-space: nowrap;
      width: fit-content;
      /* Animation par d√©faut */
      animation: scrollHorizontal var(--scroll-speed) linear infinite;
    }

    /* Animations selon la direction */
    .scroll-track--horizontal {
      animation: scrollHorizontal var(--scroll-speed) linear infinite;
    }

    .scroll-track--horizontal-reverse {
      animation: scrollHorizontalReverse var(--scroll-speed) linear infinite;
    }

    .scroll-track--vertical {
      flex-direction: column;
      animation: scrollVertical var(--scroll-speed) linear infinite;
      height: fit-content;
    }

    .scroll-track--fade {
      animation: scrollFade var(--scroll-speed) ease-in-out infinite;
    }

    /* Keyframes d'animation */
    @keyframes scrollHorizontal {
      0% {
        transform: translateX(0);
      }
      100% {
        transform: translateX(-50%);
      }
    }

    @keyframes scrollHorizontalReverse {
      0% {
        transform: translateX(-50%);
      }
      100% {
        transform: translateX(0);
      }
    }

    @keyframes scrollVertical {
      0% {
        transform: translateY(100%);
      }
      100% {
        transform: translateY(-100%);
      }
    }

    @keyframes scrollFade {
      0%, 100% {
        opacity: 1;
      }
      50% {
        opacity: 0.3;
      }
    }

    /* √âl√©ments de d√©filement */
    .scroll-item {
      display: inline-flex;
      align-items: center;
      gap: calc(var(--separator-spacing) / 2);
      font-size: var(--font-size);
      flex-shrink: 0;
      transition: transform 0.3s ease;
    }

    .scroll-item:hover {
      transform: scale(1.05);
    }

    /* Types d'√©l√©ments */
    .scroll-item--text .text-content {
      font-weight: {{ section.settings.font_weight }};
      text-transform: {{ section.settings.text_transform }};
      letter-spacing: {{ section.settings.letter_spacing }}px;
      white-space: nowrap;
    }

    .scroll-item--image .image-content {
      height: var(--image-height);
      width: auto;
      object-fit: contain;
      border-radius: {{ section.settings.image_border_radius }}px;
      transition: transform 0.3s ease;
    }

    .scroll-item--image:hover .image-content {
      transform: scale(1.1);
    }

    .scroll-item--icon .icon-content {
      display: inline-flex;
      align-items: center;
      justify-content: center;
    }

    .scroll-item--icon svg,
    .scroll-item--icon i {
      width: var(--icon-size);
      height: var(--icon-size);
      font-size: var(--icon-size);
      color: currentColor;
      transition: transform 0.3s ease;
    }

    .scroll-item--icon:hover svg,
    .scroll-item--icon:hover i {
      transform: rotate(15deg) scale(1.2);
    }

    /* S√©parateurs */
    .separator {
      color: var(--separator-color);
      font-size: 1.2em;
      font-weight: bold;
      margin: 0 var(--separator-spacing);
      flex-shrink: 0;
    }

    .separator--dot::before { content: '‚Ä¢'; }
    .separator--pipe::before { content: '|'; }
    .separator--arrow::before { content: '‚Üí'; }
    .separator--star::before { content: '‚òÖ'; }
    .separator--diamond::before { content: '‚óÜ'; }

    /* Contr√¥les d'animation */
    .scroll-controls {
      position: absolute;
      top: 10px;
      right: 10px;
      display: flex;
      gap: 8px;
      z-index: 10;
      opacity: 0.7;
      transition: opacity 0.3s ease;
    }

    .scroll-controls:hover {
      opacity: 1;
    }

    .scroll-control-btn {
      background: rgba(0, 0, 0, 0.1);
      border: 1px solid rgba(0, 0, 0, 0.2);
      border-radius: 4px;
      padding: 6px 8px;
      cursor: pointer;
      font-size: 12px;
      transition: all 0.3s ease;
      min-width: 30px;
      text-align: center;
    }

    .scroll-control-btn:hover {
      background: rgba(0, 0, 0, 0.2);
      transform: translateY(-1px);
    }

    .scroll-control-btn.active {
      background: var(--text-color);
      color: var(--background-color);
    }

    /* Pause au survol */
    .advanced-scroll-container[data-pause-hover="true"]:hover .scroll-track {
      animation-play-state: paused;
    }

    /* Mode statique pour accessibilit√© */
    .scroll-track--static {
      animation: none !important;
    }

    .static-mode {
      overflow-x: auto;
      overflow-y: hidden;
      scroll-behavior: smooth;
    }

    .static-mode .scroll-track {
      width: max-content;
    }

    /* Responsive Design */
    @media screen and (max-width: 768px) {
      #shopify-section-{{ section.id }} {
        --font-size: clamp({{ section.settings.mobile_min_font }}px, {{ section.settings.mobile_font_vw }}vw, {{ section.settings.mobile_max_font }}px);
        --item-gap: calc(var(--item-gap) * 0.7);
      }
      
      .scroll-controls {
        top: 5px;
        right: 5px;
      }
      
      .scroll-control-btn {
        padding: 4px 6px;
        font-size: 10px;
        min-width: 25px;
      }

      .scroll-mask::before,
      .scroll-mask::after {
        width: 30px;
      }
    }

    /* Pr√©f√©rence mouvement r√©duit */
    @media (prefers-reduced-motion: reduce) {
      .scroll-track {
        animation: none !important;
      }
      
      .advanced-scroll-container {
        overflow-x: auto;
        scroll-behavior: smooth;
      }
      
      .scroll-track {
        width: max-content;
      }
      
      .scroll-controls {
        display: none;
      }
    }

    /* Force l'animation m√™me si d'autres CSS l'interf√®rent */
    .scroll-track[data-animated="true"] {
      animation-play-state: running !important;
    }

    .scroll-track[data-paused="true"] {
      animation-play-state: paused !important;
    }
  </style>

  <div class="advanced-scroll-container" 
       id="scroll-container-{{ section.id }}"
       data-pause-hover="{{ section.settings.pause_on_hover }}"
       data-speed="{{ section.settings.animation_speed }}"
       data-direction="{{ section.settings.direction }}">
    
    {% if section.settings.show_controls %}
      <div class="scroll-controls" role="group" aria-label="Contr√¥les d'animation">
        <button type="button" class="scroll-control-btn pause-btn" aria-label="Pause/Lecture" data-action="toggle">
          <span class="pause-icon">‚è∏</span>
          <span class="play-icon" style="display: none;">‚ñ∂</span>
        </button>
        <button type="button" class="scroll-control-btn stop-btn" aria-label="Arr√™ter" data-action="stop">‚èπ</button>
        <button type="button" class="scroll-control-btn speed-btn" aria-label="Vitesse" data-action="speed">üèÉ</button>
      </div>
    {% endif %}

    <div class="scroll-mask">
      <div class="scroll-track scroll-track--{{ section.settings.direction }}" 
           id="scroll-track-{{ section.id }}"
           data-animated="true">
        
        {%- capture scroll_content -%}
          {% for block in section.blocks %}
            <div class="scroll-item scroll-item--{{ block.type }}" {{ block.shopify_attributes }}>
              {% case block.type %}
                {% when 'text_item' %}
                  <span class="text-content" {% if block.settings.custom_color != blank %}style="color: {{ block.settings.custom_color }}"{% endif %}>
                    {{ block.settings.text | escape }}
                  </span>
                  
                {% when 'image_item' %}
                  {% if block.settings.image != blank %}
                    <img src="{{ block.settings.image | image_url: width: block.settings.image_width }}" 
                         alt="{{ block.settings.alt_text | escape | default: block.settings.image.alt }}"
                         class="image-content"
                         loading="lazy"
                         width="{{ block.settings.image_width }}"
                         height="auto">
                  {% endif %}
                  
                {% when 'icon_item' %}
                  <div class="icon-content" {% if block.settings.icon_color != blank %}style="color: {{ block.settings.icon_color }}"{% endif %}>
                    {% if block.settings.icon_type == 'svg' and block.settings.custom_svg != blank %}
                      {{ block.settings.custom_svg }}
                    {% elsif block.settings.icon_type == 'fontawesome' %}
                      <i class="fas fa-{{ block.settings.fontawesome_icon }}"></i>
                    {% elsif block.settings.icon_type == 'emoji' %}
                      <span style="font-size: var(--icon-size);">{{ block.settings.emoji_icon }}</span>
                    {% endif %}
                  </div>
                  
                {% when 'custom_html' %}
                  <div class="custom-content">
                    {{ block.settings.custom_html }}
                  </div>
              {% endcase %}
              
              {% unless forloop.last %}
                {% if section.settings.separator_type != 'none' %}
                  <span class="separator separator--{{ section.settings.separator_type }}"></span>
                {% endif %}
              {% endunless %}
            </div>
          {% endfor %}
        {%- endcapture -%}

        {%- comment -%} Contenu original {%- endcomment -%}
        {{ scroll_content }}
        {%- comment -%} Contenu dupliqu√© pour effet infini {%- endcomment -%}
        {{ scroll_content }}
        
      </div>
    </div>
  </div>

  <script>
    (function() {
      'use strict';
      
      class AdvancedScrollingText {
        constructor(container) {
          this.container = container;
          this.track = container.querySelector('.scroll-track');
          this.controls = container.querySelector('.scroll-controls');
          
          if (!this.track) return;
          
          this.config = {
            speed: parseInt(container.dataset.speed) || 20,
            direction: container.dataset.direction || 'horizontal',
            pauseHover: container.dataset.pauseHover === 'true'
          };
          
          this.state = {
            isPlaying: true,
            isPaused: false,
            currentSpeed: this.config.speed,
            speedIndex: 1
          };
          
          this.speeds = [40, 20, 10]; // Lent, Normal, Rapide
          this.speedLabels = ['üêå', 'üèÉ', '‚ö°'];
          
          this.init();
        }
        
        init() {
          // Forcer l'animation au d√©marrage
          this.forceAnimation();
          
          // Configurer les contr√¥les
          this.setupControls();
          
          // Gestion de l'accessibilit√©
          this.setupAccessibility();
          
          // Observer l'intersection
          this.setupIntersectionObserver();
          
          console.log('Scrolling text initialized for:', this.container.id);
        }
        
        forceAnimation() {
          // S'assurer que l'animation fonctionne
          if (this.track) {
            this.track.style.animationDuration = this.config.speed + 's';
            this.track.style.animationPlayState = 'running';
            this.track.setAttribute('data-animated', 'true');
            
            // Force un reflow pour d√©marrer l'animation
            this.track.offsetHeight;
          }
        }
        
        setupControls() {
          if (!this.controls) return;
          
          this.controls.addEventListener('click', (e) => {
            const btn = e.target.closest('[data-action]');
            if (!btn) return;
            
            const action = btn.dataset.action;
            
            switch (action) {
              case 'toggle':
                this.toggle();
                break;
              case 'stop':
                this.stop();
                break;
              case 'speed':
                this.cycleSpeed();
                break;
            }
          });
        }
        
        setupAccessibility() {
          // Gestion du mouvement r√©duit
          const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)');
          
          const handleMotionPreference = (mediaQuery) => {
            if (mediaQuery.matches) {
              this.enableStaticMode();
            } else {
              this.disableStaticMode();
            }
          };
          
          prefersReducedMotion.addEventListener('change', handleMotionPreference);
          handleMotionPreference(prefersReducedMotion);
          
          // Contr√¥les clavier
          this.container.addEventListener('keydown', (e) => {
            if (e.key === ' ' || e.key === 'Spacebar') {
              e.preventDefault();
              this.toggle();
            } else if (e.key === 'Escape') {
              this.stop();
            }
          });
          
          this.container.setAttribute('tabindex', '0');
          this.container.setAttribute('role', 'region');
          this.container.setAttribute('aria-label', 'Contenu d√©filant anim√©');
        }
        
        setupIntersectionObserver() {
          const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                this.play();
              } else {
                // Optionnel: pause quand hors vue
                // this.pause();
              }
            });
          }, {
            threshold: 0.1
          });
          
          observer.observe(this.container);
        }
        
        play() {
          this.state.isPlaying = true;
          this.state.isPaused = false;
          
          if (this.track) {
            this.track.style.animationPlayState = 'running';
            this.track.setAttribute('data-animated', 'true');
            this.track.removeAttribute('data-paused');
          }
          
          this.updateControlsUI();
        }
        
        pause() {
          this.state.isPaused = true;
          
          if (this.track) {
            this.track.style.animationPlayState = 'paused';
            this.track.setAttribute('data-paused', 'true');
          }
          
          this.updateControlsUI();
        }
        
        stop() {
          this.state.isPlaying = false;
          this.state.isPaused = false;
          
          if (this.track) {
            this.track.style.animationPlayState = 'paused';
            this.track.style.transform = 'translateX(0)';
            this.track.removeAttribute('data-animated');
          }
          
          this.updateControlsUI();
        }
        
        toggle() {
          if (this.state.isPlaying && !this.state.isPaused) {
            this.pause();
          } else {
            this.play();
          }
        }
        
        cycleSpeed() {
          this.state.speedIndex = (this.state.speedIndex + 1) % this.speeds.length;
          this.state.currentSpeed = this.speeds[this.state.speedIndex];
          this.setSpeed(this.state.currentSpeed);
        }
        
        setSpeed(speed) {
          if (this.track) {
            this.track.style.animationDuration = speed + 's';
            // Force restart animation with new speed
            this.track.style.animation = 'none';
            this.track.offsetHeight; // Force reflow
            this.track.style.animation = null;
          }
        }
        
        enableStaticMode() {
          if (this.track) {
            this.track.classList.add('scroll-track--static');
          }
          this.container.classList.add('static-mode');
          
          if (this.controls) {
            this.controls.style.display = 'none';
          }
        }
        
        disableStaticMode() {
          if (this.track) {
            this.track.classList.remove('scroll-track--static');
          }
          this.container.classList.remove('static-mode');
          
          if (this.controls) {
            this.controls.style.display = 'flex';
          }
          
          this.forceAnimation();
        }
        
        updateControlsUI() {
          if (!this.controls) return;
          
          const pauseBtn = this.controls.querySelector('.pause-btn');
          const pauseIcon = pauseBtn?.querySelector('.pause-icon');
          const playIcon = pauseBtn?.querySelector('.play-icon');
          const speedBtn = this.controls.querySelector('.speed-btn');
          
          if (pauseIcon && playIcon) {
            if (this.state.isPlaying && !this.state.isPaused) {
              pauseIcon.style.display = 'inline';
              playIcon.style.display = 'none';
            } else {
              pauseIcon.style.display = 'none';
              playIcon.style.display = 'inline';
            }
          }
          
          if (speedBtn) {
            speedBtn.textContent = this.speedLabels[this.state.speedIndex];
          }
        }
      }
      
      // Initialiser au chargement du DOM
      function initScrollingSections() {
        const containers = document.querySelectorAll('.advanced-scroll-container');
        containers.forEach(container => {
          new AdvancedScrollingText(container);
        });
      }
      
      // Multiple points d'initialisation pour s'assurer que √ßa fonctionne
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initScrollingSections);
      } else {
        initScrollingSections();
      }
      
      // Fallback apr√®s un d√©lai
      setTimeout(initScrollingSections, 100);
      
    })();
  </script>
{%- endif -%}

{% schema %}
{
  "name": "Texte D√©filant Avanc√©",
  "class": "shopify-section--advanced-scrolling-text",
  "tag": "section",
  "disabled_on": {
    "groups": ["header", "custom.overlay"]
  },
  "settings": [
    {
      "type": "header",
      "content": "Configuration g√©n√©rale"
    },
    {
      "type": "checkbox",
      "id": "show_controls",
      "label": "Afficher les contr√¥les",
      "default": true,
      "info": "Boutons de contr√¥le pour pause, arr√™t et vitesse"
    },
    {
      "type": "header",
      "content": "Animation"
    },
    {
      "type": "select",
      "id": "direction",
      "label": "Direction de l'animation",
      "options": [
        {
          "value": "horizontal",
          "label": "Horizontal (gauche ‚Üí droite)"
        },
        {
          "value": "horizontal-reverse",
          "label": "Horizontal invers√© (droite ‚Üí gauche)"
        },
        {
          "value": "vertical",
          "label": "Vertical (bas ‚Üí haut)"
        },
        {
          "value": "fade",
          "label": "Fondu encha√Æn√©"
        }
      ],
      "default": "horizontal"
    },
    {
      "type": "range",
      "id": "animation_speed",
      "min": 5,
      "max": 50,
      "step": 1,
      "unit": "s",
      "label": "Vitesse d'animation",
      "default": 15,
      "info": "Plus la valeur est faible, plus l'animation est rapide"
    },
    {
      "type": "checkbox",
      "id": "pause_on_hover",
      "label": "Pause au survol",
      "default": true,
      "info": "L'animation se met en pause quand on survole la section"
    },
    {
      "type": "header",
      "content": "Espacement et s√©parateurs"
    },
    {
      "type": "range",
      "id": "item_gap",
      "min": 10,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Espacement entre les √©l√©ments",
      "default": 30
    },
    {
      "type": "select",
      "id": "separator_type",
      "label": "Type de s√©parateur",
      "options": [
        {
          "value": "none",
          "label": "Aucun"
        },
        {
          "value": "dot",
          "label": "Point (‚Ä¢)"
        },
        {
          "value": "pipe",
          "label": "Barre verticale (|)"
        },
        {
          "value": "arrow",
          "label": "Fl√®che (‚Üí)"
        },
        {
          "value": "star",
          "label": "√âtoile (‚òÖ)"
        },
        {
          "value": "diamond",
          "label": "Losange (‚óÜ)"
        }
      ],
      "default": "arrow"
    },
    {
      "type": "range",
      "id": "separator_spacing",
      "min": 5,
      "max": 50,
      "step": 5,
      "unit": "px",
      "label": "Espacement des s√©parateurs",
      "default": 20
    },
    {
      "type": "header",
      "content": "Typographie"
    },
    {
      "type": "range",
      "id": "min_font_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Taille de police minimum",
      "default": 16
    },
    {
      "type": "range",
      "id": "font_size_vw",
      "min": 1,
      "max": 10,
      "step": 0.5,
      "unit": "vw",
      "label": "Taille de police responsive",
      "default": 4
    },
    {
      "type": "range",
      "id": "max_font_size",
      "min": 24,
      "max": 120,
      "step": 4,
      "unit": "px",
      "label": "Taille de police maximum",
      "default": 48
    },
    {
      "type": "select",
      "id": "font_weight",
      "label": "Graisse de la police",
      "options": [
        {
          "value": "300",
          "label": "Light"
        },
        {
          "value": "400",
          "label": "Normal"
        },
        {
          "value": "500",
          "label": "Medium"
        },
        {
          "value": "600",
          "label": "Semi-bold"
        },
        {
          "value": "700",
          "label": "Bold"
        },
        {
          "value": "800",
          "label": "Extra-bold"
        }
      ],
      "default": "500"
    },
    {
      "type": "select",
      "id": "text_transform",
      "label": "Transformation du texte",
      "options": [
        {
          "value": "none",
          "label": "Aucune"
        },
        {
          "value": "uppercase",
          "label": "MAJUSCULES"
        },
        {
          "value": "lowercase",
          "label": "minuscules"
        },
        {
          "value": "capitalize",
          "label": "Premi√®re Lettre"
        }
      ],
      "default": "none"
    },
    {
      "type": "range",
      "id": "letter_spacing",
      "min": -2,
      "max": 10,
      "step": 0.5,
      "unit": "px",
      "label": "Espacement des lettres",
      "default": 0
    },
    {
      "type": "header",
      "content": "Images et Ic√¥nes"
    },
    {
      "type": "range",
      "id": "icon_size",
      "min": 16,
      "max": 80,
      "step": 4,
      "unit": "px",
      "label": "Taille des ic√¥nes",
      "default": 32
    },
    {
      "type": "range",
      "id": "image_height",
      "min": 20,
      "max": 120,
      "step": 5,
      "unit": "px",
      "label": "Hauteur des images",
      "default": 40
    },
    {
      "type": "range",
      "id": "image_border_radius",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Arrondi des images",
      "default": 4
    },
    {
      "type": "header",
      "content": "Mobile"
    },
    {
      "type": "range",
      "id": "mobile_min_font",
      "min": 10,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Taille police mobile min",
      "default": 14
    },
    {
      "type": "range",
      "id": "mobile_font_vw",
      "min": 2,
      "max": 6,
      "step": 0.5,
      "unit": "vw",
      "label": "Taille police mobile responsive",
      "default": 3.5
    },
    {
      "type": "range",
      "id": "mobile_max_font",
      "min": 20,
      "max": 60,
      "step": 2,
      "unit": "px",
      "label": "Taille police mobile max",
      "default": 32
    },
    {
      "type": "header",
      "content": "Couleurs"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Couleur de fond",
      "default": "#000000"
    },
    {
      "type": "color_background",
      "id": "background_gradient",
      "label": "D√©grad√© de fond"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Couleur du texte",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "separator_color",
      "label": "Couleur des s√©parateurs",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Espacement de section"
    },
    {
      "type": "range",
      "id": "section_padding_top",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Espacement haut",
      "default": 20
    },
    {
      "type": "range",
      "id": "section_padding_bottom",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "label": "Espacement bas",
      "default": 20
    }
  ],
  "blocks": [
    {
      "type": "text_item",
      "name": "√âl√©ment Texte",
      "settings": [
        {
          "type": "text",
          "id": "text",
          "label": "Texte",
          "default": "Texte promotionnel"
        },
        {
          "type": "color",
          "id": "custom_color",
          "label": "Couleur personnalis√©e (optionnel)",
          "info": "Laissez vide pour utiliser la couleur de texte globale"
        }
      ]
    },
    {
      "type": "image_item",
      "name": "√âl√©ment Image",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        },
        {
          "type": "range",
          "id": "image_width",
          "min": 20,
          "max": 200,
          "step": 10,
          "unit": "px",
          "label": "Largeur de l'image",
          "default": 60
        },
        {
          "type": "text",
          "id": "alt_text",
          "label": "Texte alternatif",
          "info": "Description de l'image pour l'accessibilit√©"
        }
      ]
    },
    {
      "type": "icon_item",
      "name": "√âl√©ment Ic√¥ne",
      "settings": [
        {
          "type": "select",
          "id": "icon_type",
          "label": "Type d'ic√¥ne",
          "options": [
            {
              "value": "emoji",
              "label": "Emoji"
            },
            {
              "value": "fontawesome",
              "label": "Font Awesome"
            },
            {
              "value": "svg",
              "label": "SVG personnalis√©"
            }
          ],
          "default": "emoji"
        },
        {
          "type": "text",
          "id": "emoji_icon",
          "label": "Emoji",
          "default": "‚≠ê",
          "info": "Copiez-collez un emoji (affich√© si 'Emoji' est s√©lectionn√©)"
        },
        {
          "type": "text",
          "id": "fontawesome_icon",
          "label": "Nom de l'ic√¥ne Font Awesome",
          "default": "star",
          "info": "Nom de l'ic√¥ne sans 'fa-' (ex: star, heart, home)"
        },
        {
          "type": "textarea",
          "id": "custom_svg",
          "label": "Code SVG personnalis√©",
          "info": "Collez le code SVG complet ici"
        },
        {
          "type": "color",
          "id": "icon_color",
          "label": "Couleur de l'ic√¥ne (optionnel)"
        }
      ]
    },
    {
      "type": "custom_html",
      "name": "HTML Personnalis√©",
      "settings": [
        {
          "type": "textarea",
          "id": "custom_html",
          "label": "Code HTML",
          "info": "Utilisez du HTML personnalis√© pour des √©l√©ments avanc√©s"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Texte D√©filant Avanc√©",
      "settings": {
        "background_color": "#000000",
        "text_color": "#ffffff",
        "separator_color": "#ffffff",
        "separator_type": "arrow",
        "animation_speed": 15
      },
      "blocks": [
        {
          "type": "text_item",
          "settings": {
            "text": "Livraison gratuite d√®s 50‚Ç¨"
          }
        },
        {
          "type": "icon_item",
          "settings": {
            "icon_type": "emoji",
            "emoji_icon": "üöö"
          }
        },
        {
          "type": "text_item",
          "settings": {
            "text": "Retours gratuits sous 30 jours"
          }
        },
        {
          "type": "icon_item",
          "settings": {
            "icon_type": "emoji",
            "emoji_icon": "‚Ü©Ô∏è"
          }
        },
        {
          "type": "text_item",
          "settings": {
            "text": "Support client 7j/7"
          }
        },
        {
          "type": "icon_item",
          "settings": {
            "icon_type": "emoji",
            "emoji_icon": "üí¨"
          }
        }
      ]
    }
  ]
}
{% endschema %}