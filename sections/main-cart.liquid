<!-- Modern Cart Section - 2025 Design -->
<style>
  /* === MODERN CART STYLES === */
  :root {
    --cart-primary: {{ section.settings.primary_color | default: '#000000' }};
    --cart-secondary: {{ section.settings.secondary_color | default: '#666666' }};
    --cart-accent: {{ section.settings.accent_color | default: '#ffffff' }};
    --cart-glass-bg: {{ section.settings.glass_background | default: 'rgba(255, 255, 255, 0.1)' }};
    --cart-border-radius: {{ section.settings.border_radius | default: '12' }}px;
    --cart-spacing: {{ section.settings.spacing | default: '24' }}px;
    --cart-animation-speed: {{ section.settings.animation_speed | default: '0.3' }}s;
  }

  .modern-cart-container {
    position: relative;
    min-height: 60vh;
    padding: var(--cart-spacing);
    background: linear-gradient(135deg, 
      {{ section.settings.bg_gradient_start | default: '#f8f9fa' }} 0%, 
      {{ section.settings.bg_gradient_end | default: '#ffffff' }} 100%);
  }

  /* === GLASSMORPHISM EFFECTS === */
  .glass-panel {
    background: var(--cart-glass-bg);
    backdrop-filter: blur({{ section.settings.glass_blur | default: 10 }}px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: var(--cart-border-radius);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    transition: all var(--cart-animation-speed) cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .glass-panel:hover {
    transform: translateY(-2px);
    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
  }

  /* === EMPTY STATE ANIMATION === */
  .empty-state {
    text-align: center;
    padding: 80px 20px;
    animation: fade-in-up var(--cart-animation-speed) ease-out;
  }

  .empty-state__icon-wrapper {
    position: relative;
    display: inline-block;
    margin-bottom: 32px;
    animation: float 3s ease-in-out infinite;
  }

  .empty-state__icon-wrapper::after {
    content: '';
    position: absolute;
    bottom: -20px;
    left: 50%;
    transform: translateX(-50%);
    width: 60px;
    height: 8px;
    background: radial-gradient(ellipse, rgba(0,0,0,0.1) 0%, transparent 70%);
    border-radius: 50%;
    animation: shadow-pulse 3s ease-in-out infinite;
  }

  .count-bubble {
    background: linear-gradient(135deg, var(--cart-primary), var(--cart-secondary));
    color: var(--cart-accent);
    border-radius: 50%;
    animation: pulse-badge 0.6s ease-out;
    position: relative;
    overflow: hidden;
  }

  .count-bubble::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(45deg, transparent, rgba(255,255,255,0.1), transparent);
    transform: rotate(45deg);
    transition: all 0.6s;
  }

  .count-bubble--lg::before {
    animation: shimmer 2s infinite;
  }

  /* === CART ITEMS ANIMATION === */
  .modern-cart {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--cart-spacing);
    max-width: 1400px;
    margin: 0 auto;
  }

  @media (min-width: 768px) {
    .modern-cart {
      grid-template-columns: 2fr 1fr;
      gap: calc(var(--cart-spacing) * 2);
    }
  }

  .cart-items-section {
    animation: slide-in-left var(--cart-animation-speed) ease-out;
  }

  .cart-summary-section {
    animation: slide-in-right var(--cart-animation-speed) ease-out;
    position: sticky;
    top: 20px;
    height: fit-content;
  }

  /* === MODERN ORDER SUMMARY === */
  .modern-order-summary {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
    background: transparent;
  }

  .modern-order-summary thead th {
    background: var(--cart-glass-bg);
    backdrop-filter: blur(5px);
    padding: 20px;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    font-size: 0.875rem;
    border: none;
    position: sticky;
    top: 0;
    z-index: 10;
  }

  .modern-order-summary thead th:first-child {
    border-top-left-radius: var(--cart-border-radius);
  }

  .modern-order-summary thead th:last-child {
    border-top-right-radius: var(--cart-border-radius);
  }

  .cart-item-row {
    transition: all var(--cart-animation-speed) ease;
    animation: fade-in-up var(--cart-animation-speed) ease-out;
    animation-fill-mode: both;
  }

  .cart-item-row:nth-child(1) { animation-delay: 0.1s; }
  .cart-item-row:nth-child(2) { animation-delay: 0.2s; }
  .cart-item-row:nth-child(3) { animation-delay: 0.3s; }

  .cart-item-row:hover {
    transform: scale(1.01);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  }

  .cart-item-row td {
    padding: 24px 20px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    background: var(--cart-glass-bg);
    backdrop-filter: blur(5px);
  }

  /* === QUANTITY INPUT MODERN === */
  .modern-quantity-wrapper {
    display: flex;
    align-items: center;
    background: var(--cart-glass-bg);
    border-radius: calc(var(--cart-border-radius) / 2);
    padding: 8px;
    border: 1px solid rgba(255, 255, 255, 0.2);
    transition: all var(--cart-animation-speed) ease;
  }

  .modern-quantity-wrapper:hover {
    border-color: var(--cart-primary);
    box-shadow: 0 0 0 3px rgba(0, 0, 0, 0.1);
  }

  .quantity-input {
    background: transparent;
    border: none;
    text-align: center;
    font-weight: 600;
    min-width: 50px;
    padding: 8px;
  }

  .quantity-btn {
    background: var(--cart-primary);
    color: var(--cart-accent);
    border: none;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all var(--cart-animation-speed) ease;
    font-weight: bold;
  }

  .quantity-btn:hover {
    transform: scale(1.1);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }

  .quantity-btn:active {
    transform: scale(0.95);
  }

  /* === MODERN CHECKOUT BUTTON === */
  .modern-checkout-btn {
    background: linear-gradient(135deg, var(--cart-primary), var(--cart-secondary));
    color: var(--cart-accent);
    border: none;
    padding: 20px 40px;
    border-radius: var(--cart-border-radius);
    font-weight: 700;
    font-size: 1.1rem;
    text-transform: uppercase;
    letter-spacing: 1px;
    cursor: pointer;
    transition: all var(--cart-animation-speed) ease;
    position: relative;
    overflow: hidden;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 12px;
  }

  .modern-checkout-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
    transition: left 0.6s;
  }

  .modern-checkout-btn:hover::before {
    left: 100%;
  }

  .modern-checkout-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
  }

  .modern-checkout-btn:active {
    transform: translateY(0);
  }

  /* === SHIPPING ESTIMATOR MODERN === */
  .modern-accordion {
    background: var(--cart-glass-bg);
    backdrop-filter: blur(10px);
    border-radius: var(--cart-border-radius);
    border: 1px solid rgba(255, 255, 255, 0.2);
    overflow: hidden;
    margin-top: var(--cart-spacing);
  }

  .accordion-header {
    padding: 20px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: space-between;
    transition: all var(--cart-animation-speed) ease;
    font-weight: 600;
  }

  .accordion-header:hover {
    background: rgba(255, 255, 255, 0.05);
  }

  .accordion-icon {
    transition: transform var(--cart-animation-speed) ease;
  }

  .accordion-header.active .accordion-icon {
    transform: rotate(180deg);
  }

  .accordion-content {
    padding: 0 20px;
    max-height: 0;
    overflow: hidden;
    transition: all var(--cart-animation-speed) ease;
  }

  .accordion-header.active + .accordion-content {
    max-height: 200px;
    padding: 20px;
  }

  /* === TOTALS SECTION === */
  .modern-totals {
    background: var(--cart-glass-bg);
    backdrop-filter: blur(15px);
    border-radius: var(--cart-border-radius);
    padding: var(--cart-spacing);
    border: 1px solid rgba(255, 255, 255, 0.2);
    animation: slide-in-up var(--cart-animation-speed) ease-out;
  }

  .total-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px 0;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    transition: all var(--cart-animation-speed) ease;
  }

  .total-row:last-child {
    border-bottom: none;
    font-weight: 700;
    font-size: 1.2rem;
    padding-top: 20px;
    margin-top: 12px;
    border-top: 2px solid rgba(255, 255, 255, 0.2);
  }

  .total-row:hover {
    background: rgba(255, 255, 255, 0.05);
    margin: 0 -12px;
    padding-left: 12px;
    padding-right: 12px;
    border-radius: 8px;
  }

  /* === PAYMENT ICONS === */
  .payment-icons {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 12px;
    flex-wrap: wrap;
    margin-top: var(--cart-spacing);
    padding: 20px;
    background: var(--cart-glass-bg);
    backdrop-filter: blur(10px);
    border-radius: var(--cart-border-radius);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .payment-icons svg {
    transition: all var(--cart-animation-speed) ease;
    filter: grayscale(100%) opacity(0.7);
  }

  .payment-icons svg:hover {
    filter: grayscale(0%) opacity(1);
    transform: scale(1.1);
  }

  /* === ANIMATIONS === */
  @keyframes fade-in-up {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes slide-in-left {
    from {
      opacity: 0;
      transform: translateX(-30px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes slide-in-right {
    from {
      opacity: 0;
      transform: translateX(30px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes slide-in-up {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes float {
    0%, 100% { transform: translateY(0px); }
    50% { transform: translateY(-10px); }
  }

  @keyframes shadow-pulse {
    0%, 100% { opacity: 0.3; transform: translateX(-50%) scale(1); }
    50% { opacity: 0.6; transform: translateX(-50%) scale(1.1); }
  }

  @keyframes pulse-badge {
    0% { transform: scale(1); }
    50% { transform: scale(1.3); }
    100% { transform: scale(1); }
  }

  @keyframes shimmer {
    0% { transform: translateX(-100%) rotate(45deg); }
    100% { transform: translateX(200%) rotate(45deg); }
  }

  /* === RESPONSIVE === */
  @media (max-width: 767px) {
    .modern-cart-container {
      padding: 16px;
    }
    
    .modern-cart {
      gap: 16px;
    }

    .cart-summary-section {
      position: static;
    }

    .modern-order-summary thead {
      display: none;
    }

    .modern-order-summary tbody tr {
      display: block;
      margin-bottom: 20px;
      background: var(--cart-glass-bg);
      border-radius: var(--cart-border-radius);
      overflow: hidden;
    }

    .modern-order-summary tbody td {
      display: block;
      padding: 16px;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .modern-order-summary tbody td:last-child {
      border-bottom: none;
    }
  }

  /* === ACCESSIBILITY === */
  @media (prefers-reduced-motion: reduce) {
    * {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
</style>

<div class="modern-cart-container">
  {%- if cart.item_count == 0 -%}
    <div class="empty-state glass-panel">
      <div class="empty-state__icon-wrapper">
        {%- render 'icon' with 'cart', width: 48, height: 48, stroke_width: 1 -%}
        <span class="count-bubble count-bubble--lg">0</span>
      </div>

      <div class="prose">
        <h2 class="h4">{{ 'cart.general.empty' | t }}</h2>
        <p>{{ section.settings.empty_cart_message | default: 'Votre panier est vide. Découvrez nos produits !' }}</p>

        {%- assign button_content = section.settings.continue_shopping_text | default: 'cart.general.continue_shopping' | t -%}
        <a href="{{ section.settings.cart_empty_button_link | default: routes.all_products_collection_url }}" 
           class="modern-checkout-btn" 
           style="max-width: 300px; margin: 32px auto 0;">
          {{ button_content }}
        </a>
      </div>
    </div>
  {%- else -%}
    <div class="modern-cart">
      <!-- Cart Items Section -->
      <div class="cart-items-section">
        <div class="glass-panel">
          <div class="cart-header" style="padding: var(--cart-spacing); border-bottom: 1px solid rgba(255, 255, 255, 0.1);">
            <h1 class="h2" style="margin: 0;">{{ 'cart.general.title' | t }} ({{ cart.item_count }})</h1>
            
            {%- if section.settings.show_free_shipping_threshold and settings.cart_show_free_shipping_threshold -%}
              <div style="margin-top: 16px;">
                {%- render 'free-shipping-bar' -%}
              </div>
            {%- endif -%}
          </div>

          <!-- Modern Order Summary Table -->
          <table class="modern-order-summary" role="table" aria-label="{{ 'cart.general.title' | t }}">
            <thead>
              <tr>
                <th scope="col">{{ 'customer.order.product' | t }}</th>
                <th scope="col" class="text-center">{{ 'customer.order.quantity' | t }}</th>
                <th scope="col" class="text-end">{{ 'customer.order.total' | t }}</th>
              </tr>
            </thead>

            <tbody>
              {%- for line_item in cart.items -%}
                {% liquid
                  assign max_quantity = nil
                
                  if line_item.variant.inventory_management != blank and line_item.variant.inventory_policy == 'deny'
                    assign current_quantity_for_variant = cart | item_count_for_variant: line_item.variant.id
                    assign max_quantity = line_item.variant.inventory_quantity | minus: current_quantity_for_variant | plus: line_item.quantity
                  endif
                
                  if line_item.variant.quantity_rule.max != nil
                    assign max_quantity = max_quantity | default: 999999 | at_most: line_item.variant.quantity_rule.max
                  endif
                %}

                <tr class="cart-item-row" data-line-key="{{ line_item.key }}">
                  <td>
                    {%- render 'line-item', line_item: line_item -%}
                  </td>

                  <td class="text-center">
                    <div class="modern-quantity-wrapper">
                      <button type="button" 
                              class="quantity-btn" 
                              onclick="updateQuantity('{{ line_item.key }}', {{ line_item.quantity | minus: 1 }})"
                              aria-label="{{ 'cart.order.decrease_quantity' | t }}"
                              {{ line_item.quantity | minus: 1 | at_least: 0 }}
                              {%- if line_item.quantity <= line_item.variant.quantity_rule.min -%}disabled{%- endif -%}>
                        −
                      </button>
                      
                      <input class="quantity-input" 
                             type="number" 
                             is="quantity-input" 
                             inputmode="numeric" 
                             min="{{ line_item.variant.quantity_rule.min }}" 
                             step="{{ line_item.variant.quantity_rule.increment }}" 
                             {% if max_quantity != nil %}max="{{ max_quantity }}"{% endif %} 
                             data-line-key="{{ line_item.key }}" 
                             aria-label="{{ 'cart.order.change_quantity' | t | escape }}" 
                             value="{{ line_item.quantity }}"
                             onchange="updateQuantity('{{ line_item.key }}', this.value)">
                      
                      <button type="button" 
                              class="quantity-btn" 
                              onclick="updateQuantity('{{ line_item.key }}', {{ line_item.quantity | plus: 1 }})"
                              aria-label="{{ 'cart.order.increase_quantity' | t }}"
                              {%- if max_quantity and line_item.quantity >= max_quantity -%}disabled{%- endif -%}>
                        +
                      </button>
                    </div>

                    <div style="margin-top: 12px; text-align: center;">
                      <button type="button" 
                              class="link" 
                              onclick="removeItem('{{ line_item.key }}')"
                              aria-label="{{ 'cart.order.remove_with_title' | t: title: line_item.title | escape }}"
                              style="color: var(--cart-secondary); font-size: 0.875rem; background: none; border: none; cursor: pointer; text-decoration: underline;">
                        {{ 'cart.order.remove' | t }}
                      </button>
                    </div>
                  </td>

                  <td class="text-end">
                    <strong style="font-size: 1.1rem;">{{ line_item.final_line_price | money }}</strong>
                    {%- if line_item.original_line_price != line_item.final_line_price -%}
                      <div style="font-size: 0.875rem; color: var(--cart-secondary); text-decoration: line-through;">
                        {{ line_item.original_line_price | money }}
                      </div>
                    {%- endif -%}
                  </td>
                </tr>
              {%- endfor -%}
            </tbody>
          </table>

          {%- if section.settings.show_shipping_estimator and cart.requires_shipping -%}
            <div class="modern-accordion">
              <div class="accordion-header" onclick="toggleAccordion(this)">
                <div style="display: flex; align-items: center; gap: 12px;">
                  {%- render 'icon' with 'picto-box', width: 20, height: 20 -%}
                  {{ 'cart.shipping_estimator.estimate_shipping' | t }}
                </div>
                <div class="accordion-icon">
                  {%- render 'icon' with 'chevron-down', width: 16, height: 16 -%}
                </div>
              </div>
              <div class="accordion-content">
                {%- render 'shipping-estimator' -%}
              </div>
            </div>
          {%- endif -%}
        </div>
      </div>

      <!-- Cart Summary Section -->
      <div class="cart-summary-section">
        <form action="{{ routes.cart_url }}" method="POST" class="cart-form">
          {%- for block in section.blocks -%}
            {%- case block.type -%}
              {%- when '@app' -%}
                {%- render block -%}

              {%- when 'totals' -%}
                <div class="modern-totals" {{ block.shopify_attributes }}>
                  {%- if block.settings.show_order_weight -%}
                    <div class="total-row">
                      <span>{{ 'cart.general.weight' | t }}</span>
                      <span>{{ cart.total_weight | weight_with_unit }}</span>
                    </div>
                  {%- endif -%}

                  <div class="total-row">
                    <span>{{ 'cart.general.subtotal' | t }}</span>
                    <span>{{ cart.items_subtotal_price | money }}</span>
                  </div>

                  {% for discount_application in cart.cart_level_discount_applications %}
                    <div class="total-row">
                      <div class="badge" style="background: var(--cart-primary); color: var(--cart-accent); padding: 4px 8px; border-radius: 4px; font-size: 0.75rem;">
                        {%- render 'icon' with 'discount' -%} {{ discount_application.title }}
                      </div>
                      <span style="color: #22c55e;">-{{ discount_application.total_allocated_amount | money }}</span>
                    </div>
                  {% endfor %}

                  <div class="total-row">
                    <span style="font-size: 1.3rem;">{{ 'cart.general.total' | t }}</span>
                    <span style="font-size: 1.3rem;">{{ cart.total_price | money_with_currency }}</span>
                  </div>

                  {%- if block.settings.show_shipping_text -%}
                    <div style="margin-top: 16px; font-size: 0.875rem; color: var(--cart-secondary); text-align: center;">
                      {%- if cart.taxes_included and shop.shipping_policy.body != blank -%}
                        {{ 'cart.general.taxes_included_and_shipping_policy_html' | t: link: shop.shipping_policy.url }}
                      {%- elsif cart.taxes_included -%}
                        {{ 'cart.general.taxes_included_but_shipping_at_checkout' | t }}
                      {%- elsif shop.shipping_policy.body != blank -%}
                        {{ 'cart.general.taxes_and_shipping_policy_at_checkout_html' | t: link: shop.shipping_policy.url }}
                      {%- else -%}
                        {{ 'cart.general.taxes_and_shipping_at_checkout' | t }}
                      {%- endif -%}
                    </div>
                  {%- endif -%}
                </div>

              {%- when 'cart_note' -%}
                <div class="glass-panel" style="margin-top: var(--cart-spacing); padding: var(--cart-spacing);" {{ block.shopify_attributes }}>
                  <cart-note class="cart-form__note block">
                    {%- assign order_note = 'cart.general.order_note' | t -%}
                    {%- render 'input', name: 'note', multiline: 3, label: order_note, value: cart.note, maxlength: block.settings.maxlength -%}
                  </cart-note>
                </div>

              {%- when 'text' -%}
                {%- if block.settings.content != blank -%}
                  <div class="glass-panel" style="margin-top: var(--cart-spacing); padding: var(--cart-spacing);" {{ block.shopify_attributes }}>
                    <div class="prose">
                      {{ block.settings.content }}
                    </div>
                  </div>
                {%- endif -%}

              {%- when 'offer' -%}
                <div class="glass-panel" style="margin-top: var(--cart-spacing); padding: var(--cart-spacing);" {{ block.shopify_attributes }}>
                  {%- render 'offer', block: block -%}
                </div>

              {%- when 'accelerated_buttons' -%}
                {% if additional_checkout_buttons %}
                  <div class="additional-checkout-buttons" style="margin-top: var(--cart-spacing);" {{ block.shopify_attributes }}>
                    {{ content_for_additional_checkout_buttons }}
                  </div>
                {% endif %}

              {%- when 'checkout_button' -%}
                <button type="submit" 
                        class="modern-checkout-btn" 
                        name="checkout" 
                        style="margin-top: var(--cart-spacing);" 
                        {{ block.shopify_attributes }}>
                  {%- render 'icon' with 'picto-lock', width: 20, height: 20 -%}
                  {{ section.settings.checkout_button_text | default: 'cart.general.checkout' | t }}
                </button>
            {%- endcase -%}
          {%- endfor -%}
        </form>

        {%- if section.settings.show_payment_icons and shop.enabled_payment_types.size > 0 -%}
          <div class="payment-icons">
            <div style="font-size: 0.75rem; color: var(--cart-secondary); margin-bottom: 12px; text-align: center; width: 100%;">
              {{ 'cart.general.we_accept' | t }}
            </div>
            {%- for type in shop.enabled_payment_types -%}
              {{ type | payment_type_svg_tag }}
            {%- endfor -%}
          </div>
        {%- endif -%}
      </div>
    </div>
  {%- endif -%}
</div>

<!-- Cart JavaScript -->
<script>
  // Quantity Update Function
  function updateQuantity(lineKey, newQuantity) {
    if (newQuantity < 0) return;
    
    const formData = new FormData();
    formData.append('updates[' + lineKey + ']', newQuantity);
    
    fetch('/cart/update.js', {
      method: 'POST',
      body: formData
    })
    .then(response => response.json())
    .then(data => {
      location.reload();
    })
    .catch(error => {
      console.error('Error:', error);
    });
  }

  // Remove Item Function
  function removeItem(lineKey) {
    updateQuantity(lineKey, 0);
  }

  // Accordion Toggle
  function toggleAccordion(header) {
    header.classList.toggle('active');
  }

  // Modern Cart Interactions
  document.addEventListener('DOMContentLoaded', function() {
    // Add ripple effect to buttons
    const buttons = document.querySelectorAll('.modern-checkout-btn, .quantity-btn');
    buttons.forEach(button => {
      button.addEventListener('click', function(e) {
        const ripple = document.createElement('span');
        const rect = this.getBoundingClientRect();
        const size = Math.max(rect.width, rect.height);
        const x = e.clientX - rect.left - size / 2;
        const y = e.clientY - rect.top - size / 2;
        
        ripple.style.width = ripple.style.height = size + 'px';
        ripple.style.left = x + 'px';
        ripple.style.top = y + 'px';
        ripple.classList.add('ripple');
        
        this.appendChild(ripple);
        
        setTimeout(() => {
          ripple.remove();
        }, 600);
      });
    });

    // Smooth animations for cart updates
    const cartRows = document.querySelectorAll('.cart-item-row');
    cartRows.forEach((row, index) => {
      row.style.animationDelay = (index * 0.1) + 's';
    });
  });
</script>

<style>
  /* Ripple Effect */
  .ripple {
    position: absolute;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.6);
    transform: scale(0);
    animation: ripple-animation 0.6s linear;
    pointer-events: none;
  }

  @keyframes ripple-animation {
    to {
      transform: scale(4);
      opacity: 0;
    }
  }
</style>

{% schema %}
{
  "name": "Modern Cart",
  "class": "shopify-section--modern-cart",
  "tag": "section",
  "settings": [
    {
      "type": "header",
      "content": "Couleurs et Style"
    },
    {
      "type": "color",
      "id": "primary_color",
      "label": "Couleur principale",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "secondary_color",
      "label": "Couleur secondaire",
      "default": "#666666"
    },
    {
      "type": "color",
      "id": "accent_color",
      "label": "Couleur d'accent",
      "default": "#ffffff"
    },
    {
      "type": "text",
      "id": "glass_background",
      "label": "Arrière-plan glassmorphisme",
      "default": "rgba(255, 255, 255, 0.1)",
      "info": "Format: rgba(255, 255, 255, 0.1)"
    },
    {
      "type": "color",
      "id": "bg_gradient_start",
      "label": "Début du dégradé d'arrière-plan",
      "default": "#f8f9fa"
    },
    {
      "type": "color",
      "id": "bg_gradient_end",
      "label": "Fin du dégradé d'arrière-plan",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Paramètres visuels"
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 30,
      "step": 2,
      "unit": "px",
      "label": "Rayon des bordures",
      "default": 12
    },
    {
      "type": "range",
      "id": "glass_blur",
      "min": 0,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Flou glassmorphisme",
      "default": 10
    },
    {
      "type": "range",
      "id": "spacing",
      "min": 16,
      "max": 48,
      "step": 4,
      "unit": "px",
      "label": "Espacement général",
      "default": 24
    },
    {
      "type": "header",
      "content": "Animations"
    },
    {
      "type": "select",
      "id": "animation_speed",
      "label": "Vitesse des animations",
      "options": [
        {
          "value": "0.2",
          "label": "Rapide"
        },
        {
          "value": "0.3",
          "label": "Normal"
        },
        {
          "value": "0.5",
          "label": "Lent"
        }
      ],
      "default": "0.3"
    },
    {
      "type": "header",
      "content": "Contenu"
    },
    {
      "type": "richtext",
      "id": "empty_cart_message",
      "label": "Message panier vide",
      "default": "<p>Votre panier est vide. Découvrez nos produits !</p>"
    },
    {
      "type": "text",
      "id": "continue_shopping_text",
      "label": "Texte bouton continuer shopping",
      "default": "Continuer mes achats"
    },
    {
      "type": "text",
      "id": "checkout_button_text",
      "label": "Texte bouton checkout",
      "default": "Finaliser ma commande"
    },
    {
      "type": "url",
      "id": "cart_empty_button_link",
      "label": "Lien bouton panier vide",
      "default": "/collections/all"
    },
    {
      "type": "header",
      "content": "Fonctionnalités"
    },
    {
      "type": "checkbox",
      "id": "show_shipping_estimator",
      "label": "Afficher l'estimateur de livraison",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_free_shipping_threshold",
      "label": "Afficher la barre de livraison gratuite",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_payment_icons",
      "label": "Afficher les icônes de paiement",
      "default": true
    }
  ],
  "blocks": [
    {
      "type": "@app"
    },
    {
      "type": "totals",
      "name": "Totaux",
      "limit": 1,
      "settings": [
        {
          "type": "checkbox",
          "id": "show_order_weight",
          "label": "Afficher le poids de la commande",
          "default": false
        },
        {
          "type": "checkbox",
          "id": "show_shipping_text",
          "label": "Afficher le texte livraison/taxes",
          "default": true
        }
      ]
    },
    {
      "type": "cart_note",
      "name": "Note de commande",
      "limit": 1,
      "settings": [
        {
          "type": "number",
          "id": "maxlength",
          "label": "Nombre maximum de caractères",
          "default": 500
        }
      ]
    },
    {
      "type": "text",
      "name": "Texte personnalisé",
      "settings": [
        {
          "type": "richtext",
          "id": "content",
          "label": "Contenu",
          "default": "<p>Texte personnalisé pour votre panier</p>"
        }
      ]
    },
    {
      "type": "checkout_button",
      "name": "Bouton de checkout",
      "limit": 1
    },
    {
      "type": "accelerated_buttons",
      "name": "Paiement express",
      "limit": 1,
      "settings": [
        {
          "type": "paragraph",
          "content": "Configurez les boutons de paiement express dans vos [paramètres de paiement](https://www.shopify.com/admin/settings/payments)."
        }
      ]
    },
    {
      "type": "offer",
      "name": "Offre",
      "limit": 3,
      "settings": [
        {
          "type": "select",
          "id": "text_alignment",
          "label": "Alignement du texte",
          "options": [
            {
              "value": "start",
              "label": "Gauche"
            },
            {
              "value": "center",
              "label": "Centre"
            }
          ],
          "default": "start"
        },
        {
          "type": "select",
          "id": "icon_position",
          "label": "Position de l'icône",
          "options": [
            {
              "value": "aligned",
              "label": "Aligné horizontalement"
            },
            {
              "value": "stacked",
              "label": "Empilé"
            }
          ],
          "default": "aligned"
        },
        {
          "type": "select",
          "id": "icon",
          "label": "Icône",
          "options": [
            {
              "value": "none",
              "label": "Aucune"
            },
            {
              "value": "picto-coupon",
              "label": "Coupon",
              "group": "Boutique"
            },
            {
              "value": "picto-truck",
              "label": "Camion",
              "group": "Livraison"
            },
            {
              "value": "picto-shield",
              "label": "Bouclier",
              "group": "Sécurité"
            },
            {
              "value": "picto-return",
              "label": "Retour",
              "group": "Service"
            }
          ],
          "default": "picto-coupon"
        },
        {
          "type": "image_picker",
          "id": "custom_icon",
          "label": "Icône personnalisée",
          "info": "240 x 240px .png recommandé"
        },
        {
          "type": "range",
          "id": "icon_width",
          "min": 20,
          "max": 80,
          "step": 4,
          "unit": "px",
          "label": "Largeur de l'icône",
          "default": 32
        },
        {
          "type": "text",
          "id": "title",
          "label": "Titre",
          "default": "Livraison gratuite"
        },
        {
          "type": "richtext",
          "id": "content",
          "label": "Contenu",
          "default": "<p>Profitez de la livraison gratuite dès 50€ d'achat.</p>"
        },
        {
          "type": "color",
          "id": "background",
          "label": "Arrière-plan"
        },
        {
          "type": "color",
          "id": "text_color",
          "label": "Couleur du texte"
        }
      ]
    }
  ]
}
{% endschema %}