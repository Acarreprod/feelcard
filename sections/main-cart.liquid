<!-- Modern Responsive Cart Section - 2025 Design -->
<style>
  /* === CSS VARIABLES === */
  :root {
    --cart-primary: {{ section.settings.primary_color | default: '#000000' }};
    --cart-secondary: {{ section.settings.secondary_color | default: '#666666' }};
    --cart-accent: {{ section.settings.accent_color | default: '#ffffff' }};
    --cart-success: {{ section.settings.success_color | default: '#10b981' }};
    --cart-glass-bg: {{ section.settings.glass_background | default: 'rgba(255, 255, 255, 0.95)' }};
    --cart-border-radius: {{ section.settings.border_radius | default: '16' }}px;
    --cart-spacing-xs: 8px;
    --cart-spacing-sm: 12px;
    --cart-spacing-md: 16px;
    --cart-spacing-lg: 24px;
    --cart-spacing-xl: 32px;
    --cart-spacing-xxl: 48px;
    --cart-animation-speed: {{ section.settings.animation_speed | default: '0.3' }}s;
    --cart-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    --cart-shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  }

  /* === RESET & BASE === */
  .modern-cart-wrapper * {
    box-sizing: border-box;
  }

  .modern-cart-wrapper {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    color: var(--cart-primary);
    line-height: 1.6;
  }

  /* === MAIN CONTAINER === */
  .modern-cart-container {
    width: 100%;
    max-width: 1400px;
    margin: 0 auto;
    padding: var(--cart-spacing-md);
    min-height: 50vh;
    background: linear-gradient(135deg, 
      {{ section.settings.bg_gradient_start | default: '#f8fafc' }} 0%, 
      {{ section.settings.bg_gradient_end | default: '#ffffff' }} 100%);
  }

  @media (min-width: 768px) {
    .modern-cart-container {
      padding: var(--cart-spacing-xl);
    }
  }

  /* === GLASSMORPHISM COMPONENTS === */
  .glass-card {
    background: var(--cart-glass-bg);
    backdrop-filter: blur({{ section.settings.glass_blur | default: 12 }}px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: var(--cart-border-radius);
    box-shadow: var(--cart-shadow-lg);
    transition: all var(--cart-animation-speed) cubic-bezier(0.4, 0, 0.2, 1);
  }

  .glass-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }

  /* === EMPTY STATE === */
  .empty-state {
    text-align: center;
    padding: var(--cart-spacing-xxl) var(--cart-spacing-lg);
    animation: fadeInUp 0.6s ease-out;
  }

  .empty-state__icon {
    width: 80px;
    height: 80px;
    margin: 0 auto var(--cart-spacing-lg);
    background: linear-gradient(135deg, var(--cart-primary), var(--cart-secondary));
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    animation: float 3s ease-in-out infinite;
  }

  .empty-state__icon svg {
    width: 40px;
    height: 40px;
    color: var(--cart-accent);
  }

  .empty-state__title {
    font-size: 1.5rem;
    font-weight: 700;
    margin-bottom: var(--cart-spacing-sm);
    color: var(--cart-primary);
  }

  .empty-state__message {
    font-size: 1rem;
    color: var(--cart-secondary);
    margin-bottom: var(--cart-spacing-xl);
    max-width: 400px;
    margin-left: auto;
    margin-right: auto;
  }

  /* === CART LAYOUT === */
  .cart-layout {
    display: grid;
    grid-template-columns: 1fr;
    gap: var(--cart-spacing-lg);
    animation: fadeInUp 0.6s ease-out;
  }

  @media (min-width: 1024px) {
    .cart-layout {
      grid-template-columns: 2fr 1fr;
      gap: var(--cart-spacing-xxl);
    }
  }

  /* === CART HEADER === */
  .cart-header {
    padding: var(--cart-spacing-lg);
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    background: linear-gradient(135deg, var(--cart-primary), var(--cart-secondary));
    color: var(--cart-accent);
    border-radius: var(--cart-border-radius) var(--cart-border-radius) 0 0;
  }

  .cart-title {
    font-size: 1.5rem;
    font-weight: 700;
    margin: 0;
    display: flex;
    align-items: center;
    gap: var(--cart-spacing-sm);
  }

  @media (min-width: 768px) {
    .cart-title {
      font-size: 1.75rem;
    }
  }

  .cart-count {
    background: rgba(255, 255, 255, 0.2);
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 0.875rem;
  }

  /* === CART ITEMS === */
  .cart-items {
    animation: slideInLeft 0.6s ease-out;
  }

  .cart-item {
    display: grid;
    grid-template-columns: 80px 1fr auto;
    gap: var(--cart-spacing-md);
    padding: var(--cart-spacing-lg);
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    transition: all var(--cart-animation-speed) ease;
    align-items: center;
  }

  @media (min-width: 768px) {
    .cart-item {
      grid-template-columns: 100px 1fr auto auto;
      gap: var(--cart-spacing-lg);
    }
  }

  .cart-item:hover {
    background: rgba(0, 0, 0, 0.02);
    transform: translateX(4px);
  }

  .cart-item:last-child {
    border-bottom: none;
  }

  /* === PRODUCT IMAGE === */
  .product-image {
    width: 80px;
    height: 80px;
    border-radius: 12px;
    overflow: hidden;
    position: relative;
    background: #f8fafc;
  }

  @media (min-width: 768px) {
    .product-image {
      width: 100px;
      height: 100px;
    }
  }

  .product-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform var(--cart-animation-speed) ease;
  }

  .product-image:hover img {
    transform: scale(1.05);
  }

  /* === PRODUCT INFO === */
  .product-info {
    min-width: 0;
  }

  .product-title {
    font-weight: 600;
    font-size: 1rem;
    margin-bottom: 4px;
    color: var(--cart-primary);
  }

  @media (min-width: 768px) {
    .product-title {
      font-size: 1.1rem;
    }
  }

  .product-variant {
    font-size: 0.875rem;
    color: var(--cart-secondary);
    margin-bottom: var(--cart-spacing-xs);
  }

  .product-price {
    font-weight: 600;
    color: var(--cart-primary);
  }

  .product-price--original {
    text-decoration: line-through;
    color: var(--cart-secondary);
    font-size: 0.875rem;
    margin-right: var(--cart-spacing-xs);
  }

  /* === QUANTITY CONTROLS === */
  .quantity-controls {
    display: flex;
    align-items: center;
    background: #f8fafc;
    border-radius: 12px;
    padding: 4px;
    border: 1px solid #e2e8f0;
    transition: all var(--cart-animation-speed) ease;
  }

  .quantity-controls:hover {
    border-color: var(--cart-primary);
    box-shadow: 0 0 0 3px rgba(0, 0, 0, 0.1);
  }

  .quantity-btn {
    width: 32px;
    height: 32px;
    border: none;
    background: var(--cart-primary);
    color: var(--cart-accent);
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-weight: 600;
    transition: all var(--cart-animation-speed) ease;
  }

  .quantity-btn:hover {
    transform: scale(1.1);
    background: var(--cart-secondary);
  }

  .quantity-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }

  .quantity-input {
    width: 50px;
    height: 32px;
    border: none;
    background: transparent;
    text-align: center;
    font-weight: 600;
    font-size: 1rem;
  }

  .remove-item {
    margin-top: var(--cart-spacing-xs);
    background: none;
    border: none;
    color: var(--cart-secondary);
    font-size: 0.875rem;
    cursor: pointer;
    text-decoration: underline;
    transition: color var(--cart-animation-speed) ease;
  }

  .remove-item:hover {
    color: #dc2626;
  }

  /* === ITEM TOTAL === */
  .item-total {
    text-align: right;
    font-weight: 700;
    font-size: 1.1rem;
    color: var(--cart-primary);
  }

  @media (max-width: 767px) {
    .quantity-controls {
      grid-column: 1 / -1;
      justify-self: start;
      margin-top: var(--cart-spacing-sm);
    }
    
    .item-total {
      grid-column: 1 / -1;
      text-align: left;
      margin-top: var(--cart-spacing-sm);
    }
    
    .cart-item {
      grid-template-columns: 80px 1fr;
      grid-template-rows: auto auto auto;
    }
  }

  /* === CART SUMMARY === */
  .cart-summary {
    animation: slideInRight 0.6s ease-out;
    position: sticky;
    top: var(--cart-spacing-lg);
    height: fit-content;
  }

  .summary-header {
    padding: var(--cart-spacing-lg);
    background: var(--cart-primary);
    color: var(--cart-accent);
    border-radius: var(--cart-border-radius) var(--cart-border-radius) 0 0;
  }

  .summary-title {
    font-size: 1.25rem;
    font-weight: 700;
    margin: 0;
  }

  .summary-content {
    padding: var(--cart-spacing-lg);
  }

  .summary-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--cart-spacing-sm) 0;
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  }

  .summary-row:last-child {
    border-bottom: none;
    padding-top: var(--cart-spacing-md);
    margin-top: var(--cart-spacing-md);
    border-top: 2px solid rgba(0, 0, 0, 0.1);
    font-weight: 700;
    font-size: 1.25rem;
  }

  .summary-label {
    color: var(--cart-secondary);
  }

  .summary-value {
    font-weight: 600;
    color: var(--cart-primary);
  }

  .discount-badge {
    background: var(--cart-success);
    color: white;
    padding: 4px 8px;
    border-radius: 6px;
    font-size: 0.75rem;
    font-weight: 600;
    display: inline-flex;
    align-items: center;
    gap: 4px;
  }

  /* === SHIPPING ESTIMATOR === */
  .shipping-estimator {
    margin-top: var(--cart-spacing-lg);
    border: 1px solid rgba(0, 0, 0, 0.1);
    border-radius: var(--cart-border-radius);
    overflow: hidden;
  }

  .estimator-header {
    padding: var(--cart-spacing-md);
    background: #f8fafc;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: space-between;
    transition: background var(--cart-animation-speed) ease;
  }

  .estimator-header:hover {
    background: #f1f5f9;
  }

  .estimator-content {
    padding: 0;
    max-height: 0;
    overflow: hidden;
    transition: all var(--cart-animation-speed) ease;
  }

  .estimator-content.active {
    padding: var(--cart-spacing-md);
    max-height: 300px;
  }

  /* === CHECKOUT BUTTON === */
  .checkout-btn {
    width: 100%;
    background: linear-gradient(135deg, var(--cart-primary), var(--cart-secondary));
    color: var(--cart-accent);
    border: none;
    padding: var(--cart-spacing-md) var(--cart-spacing-lg);
    border-radius: var(--cart-border-radius);
    font-size: 1.1rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    cursor: pointer;
    transition: all var(--cart-animation-speed) ease;
    position: relative;
    overflow: hidden;
    margin-top: var(--cart-spacing-lg);
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--cart-spacing-sm);
  }

  .checkout-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
    transition: left 0.6s;
  }

  .checkout-btn:hover::before {
    left: 100%;
  }

  .checkout-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
  }

  .checkout-btn:active {
    transform: translateY(0);
  }

  /* === PAYMENT ICONS === */
  .payment-methods {
    margin-top: var(--cart-spacing-lg);
    text-align: center;
  }

  .payment-label {
    font-size: 0.75rem;
    color: var(--cart-secondary);
    margin-bottom: var(--cart-spacing-sm);
  }

  .payment-icons {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--cart-spacing-sm);
    flex-wrap: wrap;
  }

  .payment-icons svg {
    height: 24px;
    filter: grayscale(100%) opacity(0.6);
    transition: all var(--cart-animation-speed) ease;
  }

  .payment-icons svg:hover {
    filter: grayscale(0%) opacity(1);
    transform: scale(1.1);
  }

  /* === CART NOTE === */
  .cart-note {
    margin-top: var(--cart-spacing-lg);
  }

  .cart-note textarea {
    width: 100%;
    min-height: 80px;
    padding: var(--cart-spacing-md);
    border: 1px solid rgba(0, 0, 0, 0.1);
    border-radius: var(--cart-border-radius);
    font-family: inherit;
    font-size: 0.9rem;
    resize: vertical;
    transition: border-color var(--cart-animation-speed) ease;
  }

  .cart-note textarea:focus {
    border-color: var(--cart-primary);
    outline: none;
    box-shadow: 0 0 0 3px rgba(0, 0, 0, 0.1);
  }

  /* === ANIMATIONS === */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes slideInLeft {
    from {
      opacity: 0;
      transform: translateX(-30px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes slideInRight {
    from {
      opacity: 0;
      transform: translateX(30px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes float {
    0%, 100% { transform: translateY(0px); }
    50% { transform: translateY(-8px); }
  }

  /* === RESPONSIVE IMPROVEMENTS === */
  @media (max-width: 767px) {
    .cart-layout {
      gap: var(--cart-spacing-md);
    }
    
    .cart-summary {
      position: static;
      order: -1;
    }
    
    .cart-title {
      font-size: 1.25rem;
    }
    
    .checkout-btn {
      position: sticky;
      bottom: var(--cart-spacing-md);
      z-index: 10;
      margin: var(--cart-spacing-lg) 0;
    }
  }

  /* === ACCESSIBILITY === */
  @media (prefers-reduced-motion: reduce) {
    * {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  /* === LOADING STATES === */
  .loading {
    opacity: 0.6;
    pointer-events: none;
  }

  .loading::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 20px;
    height: 20px;
    margin: -10px 0 0 -10px;
    border: 2px solid var(--cart-primary);
    border-top: 2px solid transparent;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
</style>

<div class="modern-cart-wrapper">
  <div class="modern-cart-container">
    {%- if cart.item_count == 0 -%}
      <!-- Empty State -->
      <div class="glass-card">
        <div class="empty-state">
          <div class="empty-state__icon">
            {%- render 'icon' with 'cart', width: 40, height: 40 -%}
          </div>
          
          <h2 class="empty-state__title">{{ 'cart.general.empty' | t }}</h2>
          <p class="empty-state__message">
            {{ section.settings.empty_cart_message | default: 'Votre panier est vide. Découvrez nos produits incroyables !' }}
          </p>
          
          <a href="{{ section.settings.cart_empty_button_link | default: routes.all_products_collection_url }}" 
             class="checkout-btn" 
             style="max-width: 300px; margin: 0 auto;">
            {{ section.settings.continue_shopping_text | default: 'Découvrir nos produits' }}
          </a>
        </div>
      </div>
    {%- else -%}
      <!-- Cart with Items -->
      <div class="cart-layout">
        <!-- Cart Items Section -->
        <div class="cart-items">
          <div class="glass-card">
            <!-- Cart Header -->
            <div class="cart-header">
              <h1 class="cart-title">
                {{ 'cart.general.title' | t }}
                <span class="cart-count">{{ cart.item_count }}</span>
              </h1>
              
              {%- if section.settings.show_free_shipping_threshold and settings.cart_show_free_shipping_threshold -%}
                <div style="margin-top: var(--cart-spacing-md);">
                  {%- render 'free-shipping-bar' -%}
                </div>
              {%- endif -%}
            </div>

            <!-- Cart Items List -->
            <div class="cart-items-list">
              {%- for line_item in cart.items -%}
                {% liquid
                  assign max_quantity = nil
                
                  if line_item.variant.inventory_management != blank and line_item.variant.inventory_policy == 'deny'
                    assign current_quantity_for_variant = cart | item_count_for_variant: line_item.variant.id
                    assign max_quantity = line_item.variant.inventory_quantity | minus: current_quantity_for_variant | plus: line_item.quantity
                  endif
                
                  if line_item.variant.quantity_rule.max != nil
                    assign max_quantity = max_quantity | default: 999999 | at_most: line_item.variant.quantity_rule.max
                  endif
                %}

                <div class="cart-item" data-line-key="{{ line_item.key }}">
                  <!-- Product Image -->
                  <div class="product-image">
                    {%- if line_item.image -%}
                      <img src="{{ line_item.image | image_url: width: 200 }}" 
                           alt="{{ line_item.title | escape }}"
                           loading="lazy">
                    {%- endif -%}
                  </div>

                  <!-- Product Info -->
                  <div class="product-info">
                    <h3 class="product-title">{{ line_item.product.title }}</h3>
                    
                    {%- unless line_item.variant.title == 'Default Title' -%}
                      <p class="product-variant">{{ line_item.variant.title }}</p>
                    {%- endunless -%}
                    
                    <div class="product-price">
                      {%- if line_item.original_price != line_item.final_price -%}
                        <span class="product-price--original">{{ line_item.original_price | money }}</span>
                      {%- endif -%}
                      <span>{{ line_item.final_price | money }}</span>
                    </div>
                  </div>

                  <!-- Quantity Controls -->
                  <div class="quantity-controls">
                    <button type="button" 
                            class="quantity-btn" 
                            onclick="updateQuantity('{{ line_item.key }}', {{ line_item.quantity | minus: 1 }})"
                            aria-label="{{ 'cart.order.decrease_quantity' | t }}"
                            {%- if line_item.quantity <= line_item.variant.quantity_rule.min -%}disabled{%- endif -%}>
                      −
                    </button>
                    
                    <input class="quantity-input" 
                           type="number" 
                           min="{{ line_item.variant.quantity_rule.min }}" 
                           step="{{ line_item.variant.quantity_rule.increment }}" 
                           {% if max_quantity != nil %}max="{{ max_quantity }}"{% endif %} 
                           value="{{ line_item.quantity }}"
                           onchange="updateQuantity('{{ line_item.key }}', this.value)"
                           aria-label="{{ 'cart.order.change_quantity' | t | escape }}">
                    
                    <button type="button" 
                            class="quantity-btn" 
                            onclick="updateQuantity('{{ line_item.key }}', {{ line_item.quantity | plus: 1 }})"
                            aria-label="{{ 'cart.order.increase_quantity' | t }}"
                            {%- if max_quantity and line_item.quantity >= max_quantity -%}disabled{%- endif -%}>
                      +
                    </button>
                  </div>

                  <!-- Item Total -->
                  <div class="item-total">
                    {{ line_item.final_line_price | money }}
                    <button type="button" 
                            class="remove-item" 
                            onclick="removeItem('{{ line_item.key }}')"
                            aria-label="{{ 'cart.order.remove_with_title' | t: title: line_item.title | escape }}">
                      {{ 'cart.order.remove' | t }}
                    </button>
                  </div>
                </div>
              {%- endfor -%}
            </div>

            <!-- Shipping Estimator -->
            {%- if section.settings.show_shipping_estimator and cart.requires_shipping -%}
              <div class="shipping-estimator">
                <div class="estimator-header" onclick="toggleEstimator(this)">
                  <div style="display: flex; align-items: center; gap: var(--cart-spacing-sm);">
                    {%- render 'icon' with 'picto-box', width: 20, height: 20 -%}
                    <span>{{ 'cart.shipping_estimator.estimate_shipping' | t }}</span>
                  </div>
                  <div class="estimator-icon">
                    {%- render 'icon' with 'chevron-down', width: 16, height: 16 -%}
                  </div>
                </div>
                <div class="estimator-content">
                  {%- render 'shipping-estimator' -%}
                </div>
              </div>
            {%- endif -%}
          </div>
        </div>

        <!-- Cart Summary Section -->
        <div class="cart-summary">
          <form action="{{ routes.cart_url }}" method="POST" class="cart-form">
            <div class="glass-card">
              <div class="summary-header">
                <h2 class="summary-title">{{ 'cart.general.subtotal' | t }}</h2>
              </div>
              
              <div class="summary-content">
                {%- for block in section.blocks -%}
                  {%- case block.type -%}
                    {%- when '@app' -%}
                      {%- render block -%}

                    {%- when 'totals' -%}
                      <div {{ block.shopify_attributes }}>
                        {%- if block.settings.show_order_weight -%}
                          <div class="summary-row">
                            <span class="summary-label">{{ 'cart.general.weight' | t }}</span>
                            <span class="summary-value">{{ cart.total_weight | weight_with_unit }}</span>
                          </div>
                        {%- endif -%}

                        <div class="summary-row">
                          <span class="summary-label">{{ 'cart.general.subtotal' | t }}</span>
                          <span class="summary-value">{{ cart.items_subtotal_price | money }}</span>
                        </div>

                        {% for discount_application in cart.cart_level_discount_applications %}
                          <div class="summary-row">
                            <span class="discount-badge">
                              {%- render 'icon' with 'discount', width: 12, height: 12 -%}
                              {{ discount_application.title }}
                            </span>
                            <span class="summary-value" style="color: var(--cart-success);">
                              -{{ discount_application.total_allocated_amount | money }}
                            </span>
                          </div>
                        {% endfor %}

                        <div class="summary-row">
                          <span class="summary-label">{{ 'cart.general.total' | t }}</span>
                          <span class="summary-value">{{ cart.total_price | money_with_currency }}</span>
                        </div>

                        {%- if block.settings.show_shipping_text -%}
                          <div style="margin-top: var(--cart-spacing-md); font-size: 0.875rem; color: var(--cart-secondary); text-align: center;">
                            {%- if cart.taxes_included and shop.shipping_policy.body != blank -%}
                              {{ 'cart.general.taxes_included_and_shipping_policy_html' | t: link: shop.shipping_policy.url }}
                            {%- elsif cart.taxes_included -%}
                              {{ 'cart.general.taxes_included_but_shipping_at_checkout' | t }}
                            {%- elsif shop.shipping_policy.body != blank -%}
                              {{ 'cart.general.taxes_and_shipping_policy_at_checkout_html' | t: link: shop.shipping_policy.url }}
                            {%- else -%}
                              {{ 'cart.general.taxes_and_shipping_at_checkout' | t }}
                            {%- endif -%}
                          </div>
                        {%- endif -%}
                      </div>

                    {%- when 'cart_note' -%}
                      <div class="cart-note" {{ block.shopify_attributes }}>
                        <label for="cart-note" style="display: block; margin-bottom: var(--cart-spacing-xs); font-weight: 600;">
                          {{ 'cart.general.order_note' | t }}
                        </label>
                        <textarea id="cart-note" 
                                  name="note" 
                                  placeholder="Ajoutez une note à votre commande (optionnel)"
                                  maxlength="{{ block.settings.maxlength | default: 500 }}">{{ cart.note }}</textarea>
                      </div>

                    {%- when 'text' -%}
                      {%- if block.settings.content != blank -%}
                        <div style="margin-top: var(--cart-spacing-md);" {{ block.shopify_attributes }}>
                          {{ block.settings.content }}
                        </div>
                      {%- endif -%}

                    {%- when 'offer' -%}
                      <div style="margin-top: var(--cart-spacing-md); padding: var(--cart-spacing-md); background: rgba(0,0,0,0.02); border-radius: 8px;" {{ block.shopify_attributes }}>
                        {%- render 'offer', block: block -%}
                      </div>

                    {%- when 'accelerated_buttons' -%}
                      {% if additional_checkout_buttons %}
                        <div style="margin-top: var(--cart-spacing-md);" {{ block.shopify_attributes }}>
                          {{ content_for_additional_checkout_buttons }}
                        </div>
                      {% endif %}

                    {%- when 'checkout_button' -%}
                      <button type="submit" 
                              class="checkout-btn" 
                              name="checkout" 
                              {{ block.shopify_attributes }}>
                        {%- render 'icon' with 'picto-lock', width: 20, height: 20 -%}
                        {{ section.settings.checkout_button_text | default: 'Finaliser ma commande' }}
                      </button>
                  {%- endcase -%}
                {%- endfor -%}
              </div>
            </div>
          </form>

          <!-- Payment Methods -->
          {%- if section.settings.show_payment_icons and shop.enabled_payment_types.size > 0 -%}
            <div class="payment-methods">
              <div class="payment-label">{{ 'cart.general.we_accept' | t }}</div>
              <div class="payment-icons">
                {%- for type in shop.enabled_payment_types -%}
                  {{ type | payment_type_svg_tag }}
                {%- endfor -%}
              </div>
            </div>
          {%- endif -%}
        </div>
      </div>
    {%- endif -%}
  </div>
</div>

<!-- Modern Cart JavaScript -->
<script>
  class ModernCart {
    constructor() {
      this.init();
    }

    init() {
      this.setupEventListeners();
      this.setupAnimations();
    }

    setupEventListeners() {
      // Quantity buttons
      document.addEventListener('click', (e) => {
        if (e.target.closest('.quantity-btn')) {
          this.handleQuantityChange(e);
        }
        if (e.target.closest('.remove-item')) {
          this.handleRemoveItem(e);
        }
      });

      // Quantity inputs
      document.addEventListener('change', (e) => {
        if (e.target.classList.contains('quantity-input')) {
          this.handleQuantityInput(e);
        }
      });
    }

    setupAnimations() {
      // Stagger cart item animations
      const cartItems = document.querySelectorAll('.cart-item');
      cartItems.forEach((item, index) => {
        item.style.animationDelay = `${index * 0.1}s`;
      });
    }

    async updateQuantity(lineKey, newQuantity) {
      if (newQuantity < 0) return;

      const cartItem = document.querySelector(`[data-line-key="${lineKey}"]`);
      if (cartItem) cartItem.classList.add('loading');

      try {
        const formData = new FormData();
        formData.append(`updates[${lineKey}]`, newQuantity);

        const response = await fetch('/cart/update.js', {
          method: 'POST',
          body: formData
        });

        if (response.ok) {
          // Smooth reload or update DOM
          window.location.reload();
        }
      } catch (error) {
        console.error('Error updating cart:', error);
      } finally {
        if (cartItem) cartItem.classList.remove('loading');
      }
    }

    async removeItem(lineKey) {
      const cartItem = document.querySelector(`[data-line-key="${lineKey}"]`);
      if (cartItem) {
        cartItem.style.transform = 'translateX(-100%)';
        cartItem.style.opacity = '0';
        
        setTimeout(() => {
          this.updateQuantity(lineKey, 0);
        }, 300);
      }
    }

    handleQuantityChange(e) {
      const btn = e.target.closest('.quantity-btn');
      const cartItem = btn.closest('.cart-item');
      const lineKey = cartItem.dataset.lineKey;
      const input = cartItem.querySelector('.quantity-input');
      const currentQty = parseInt(input.value);
      
      if (btn.textContent.includes('−')) {
        this.updateQuantity(lineKey, Math.max(0, currentQty - 1));
      } else {
        this.updateQuantity(lineKey, currentQty + 1);
      }
    }

    handleQuantityInput(e) {
      const input = e.target;
      const cartItem = input.closest('.cart-item');
      const lineKey = cartItem.dataset.lineKey;
      const newQty = Math.max(0, parseInt(input.value) || 0);
      
      this.updateQuantity(lineKey, newQty);
    }

    handleRemoveItem(e) {
      const cartItem = e.target.closest('.cart-item');
      const lineKey = cartItem.dataset.lineKey;
      this.removeItem(lineKey);
    }
  }

  // Global functions for compatibility
  function updateQuantity(lineKey, newQuantity) {
    window.modernCart.updateQuantity(lineKey, newQuantity);
  }

  function removeItem(lineKey) {
    window.modernCart.removeItem(lineKey);
  }

  function toggleEstimator(header) {
    const content = header.nextElementSibling;
    const icon = header.querySelector('.estimator-icon');
    
    content.classList.toggle('active');
    if (icon) {
      icon.style.transform = content.classList.contains('active') ? 'rotate(180deg)' : 'rotate(0deg)';
    }
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    window.modernCart = new ModernCart();
  });
</script>

{% schema %}
{
  "name": "Modern Cart",
  "class": "shopify-section--modern-cart",
  "tag": "section",
  "settings": [
    {
      "type": "header",
      "content": "🎨 Couleurs et Style"
    },
    {
      "type": "color",
      "id": "primary_color",
      "label": "Couleur principale",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "secondary_color",
      "label": "Couleur secondaire",
      "default": "#4a5568"
    },
    {
      "type": "color",
      "id": "accent_color",
      "label": "Couleur d'accent",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "success_color",
      "label": "Couleur succès",
      "default": "#10b981"
    },
    {
      "type": "text",
      "id": "glass_background",
      "label": "Arrière-plan glassmorphisme",
      "default": "rgba(255, 255, 255, 0.95)",
      "info": "Format: rgba(255, 255, 255, 0.95)"
    },
    {
      "type": "color",
      "id": "bg_gradient_start",
      "label": "Début du dégradé",
      "default": "#f8fafc"
    },
    {
      "type": "color",
      "id": "bg_gradient_end",
      "label": "Fin du dégradé",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "✨ Paramètres visuels"
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 32,
      "step": 2,
      "unit": "px",
      "label": "Rayon des bordures",
      "default": 16
    },
    {
      "type": "range",
      "id": "glass_blur",
      "min": 0,
      "max": 24,
      "step": 1,
      "unit": "px",
      "label": "Intensité du flou",
      "default": 12
    },
    {
      "type": "header",
      "content": "⚡ Animations"
    },
    {
      "type": "select",
      "id": "animation_speed",
      "label": "Vitesse des animations",
      "options": [
        {
          "value": "0.2",
          "label": "⚡ Rapide"
        },
        {
          "value": "0.3",
          "label": "🎯 Normal"
        },
        {
          "value": "0.5",
          "label": "🐌 Lent"
        }
      ],
      "default": "0.3"
    },
    {
      "type": "header",
      "content": "📝 Contenu personnalisé"
    },
    {
      "type": "richtext",
      "id": "empty_cart_message",
      "label": "Message panier vide",
      "default": "<p>Votre panier est vide. Découvrez nos produits incroyables !</p>"
    },
    {
      "type": "text",
      "id": "continue_shopping_text",
      "label": "Texte bouton shopping",
      "default": "Découvrir nos produits"
    },
    {
      "type": "text",
      "id": "checkout_button_text",
      "label": "Texte bouton checkout",
      "default": "Finaliser ma commande"
    },
    {
      "type": "url",
      "id": "cart_empty_button_link",
      "label": "Lien panier vide",
      "default": "/collections/all"
    },
    {
      "type": "header",
      "content": "🔧 Fonctionnalités"
    },
    {
      "type": "checkbox",
      "id": "show_shipping_estimator",
      "label": "Estimateur de livraison",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_free_shipping_threshold",
      "label": "Barre livraison gratuite",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_payment_icons",
      "label": "Icônes de paiement",
      "default": true
    }
  ],
  "blocks": [
    {
      "type": "@app"
    },
    {
      "type": "totals",
      "name": "💰 Totaux",
      "limit": 1,
      "settings": [
        {
          "type": "checkbox",
          "id": "show_order_weight",
          "label": "Afficher le poids",
          "default": false
        },
        {
          "type": "checkbox",
          "id": "show_shipping_text",
          "label": "Texte livraison/taxes",
          "default": true
        }
      ]
    },
    {
      "type": "cart_note",
      "name": "📝 Note commande",
      "limit": 1,
      "settings": [
        {
          "type": "number",
          "id": "maxlength",
          "label": "Caractères max",
          "default": 500
        }
      ]
    },
    {
      "type": "text",
      "name": "📄 Texte libre",
      "settings": [
        {
          "type": "richtext",
          "id": "content",
          "label": "Contenu",
          "default": "<p>Texte personnalisé</p>"
        }
      ]
    },
    {
      "type": "checkout_button",
      "name": "🛒 Bouton checkout",
      "limit": 1
    },
    {
      "type": "accelerated_buttons",
      "name": "Paiement express",
      "limit": 1,
      "settings": [
        {
          "type": "paragraph",
          "content": "Configurez dans [paramètres paiement](https://www.shopify.com/admin/settings/payments)"
        }
      ]
    },
    {
      "type": "offer",
      "name": "🎁 Offre spéciale",
      "limit": 3,
      "settings": [
        {
          "type": "select",
          "id": "text_alignment",
          "label": "Alignement",
          "options": [
            {
              "value": "start",
              "label": "Gauche"
            },
            {
              "value": "center",
              "label": "Centre"
            }
          ],
          "default": "start"
        },
        {
          "type": "select",
          "id": "icon",
          "label": "Icône",
          "options": [
            {
              "value": "none",
              "label": "Aucune"
            },
            {
              "value": "picto-coupon",
              "label": "🎫 Coupon"
            },
            {
              "value": "picto-truck",
              "label": "🚚 Livraison"
            },
            {
              "value": "picto-shield",
              "label": "🛡️ Sécurité"
            },
            {
              "value": "picto-return",
              "label": "↩️ Retour"
            },
            {
              "value": "picto-gift",
              "label": "🎁 Cadeau"
            }
          ],
          "default": "picto-coupon"
        },
        {
          "type": "text",
          "id": "title",
          "label": "Titre",
          "default": "Livraison gratuite"
        },
        {
          "type": "richtext",
          "id": "content",
          "label": "Contenu",
          "default": "<p>Dès 50€ d'achat</p>"
        },
        {
          "type": "color",
          "id": "background",
          "label": "Arrière-plan"
        }
      ]
    }
  ]
}
{% endschema %}